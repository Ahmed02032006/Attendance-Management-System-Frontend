import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { getTeachersBySchoolId } from '../../store/Admin-Slicer/Admin-Teacher-Slicer';

const AdminTeacherAttendance_Page = () => {
  const [selectedTeacherId, setSelectedTeacherId] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const [activeTab, setActiveTab] = useState('attendance');
  const [isLeaveModalVisible, setIsLeaveModalVisible] = useState(false);
  const [isReasonModalVisible, setIsReasonModalVisible] = useState(false);
  const [selectedLeave, setSelectedLeave] = useState(null);
  const [selectedReason, setSelectedReason] = useState(null);
  const [hasSearched, setHasSearched] = useState(false);
  const [filteredData, setFilteredData] = useState({  // Add this line
    attendance: [],
    leaveRequests: []
  });

  const { isLoading, teachers } = useSelector((state) => state.adminTeacher);
  const dispatch = useDispatch();
  const id = sessionStorage.getItem("currentSchoolId") || null;

  useEffect(() => {
    if (!id) return;
    dispatch(getTeachersBySchoolId(id));
  }, [dispatch, id]);

  // Ensure we're working with an array
  const teacherList = Array.isArray(teachers) ? teachers : teachers ? [teachers] : [];

  // Status badge component
  const StatusBadge = ({ status }) => {
    const colorClasses = {
      present: 'bg-emerald-100 text-emerald-800',
      absent: 'bg-rose-100 text-rose-800',
      late: 'bg-amber-100 text-amber-800',
      approved: 'bg-emerald-100 text-emerald-800',
      rejected: 'bg-rose-100 text-rose-800',
      pending: 'bg-sky-100 text-sky-800'
    };

    const iconClasses = {
      present: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
      absent: 'M18.364 5.636l-12.728 12.728M5.636 5.636l12.728 12.728',
      late: 'M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z',
      approved: 'M5 13l4 4L19 7',
      rejected: 'M6 18L18 6M6 6l12 12',
      pending: 'M8 12h.01M12 12h.01M16 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'
    };

    return (
      <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colorClasses[status] || 'bg-gray-100 text-gray-800'}`}>
        <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d={iconClasses[status] || 'M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z'} />
        </svg>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </div>
    );
  };

  // Type badge component
  const TypeBadge = ({ type }) => {
    const colorClasses = {
      sick: 'bg-red-100 text-red-800',
      personal: 'bg-indigo-100 text-indigo-800',
      professional: 'bg-purple-100 text-purple-800'
    };

    const iconClasses = {
      sick: 'M19 14l-7 7m0 0l-7-7m7 7V3',
      personal: 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z',
      professional: 'M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z'
    };

    return (
      <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colorClasses[type] || 'bg-gray-100 text-gray-800'}`}>
        <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d={iconClasses[type] || 'M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z'} />
        </svg>
        {type.charAt(0).toUpperCase() + type.slice(1)}
      </div>
    );
  };

  // Search function
  const handleSearch = () => {
    if (!selectedTeacherId) return;

    setHasSearched(true);

    const selectedTeacher = teacherList.find(teacher => teacher._id === selectedTeacherId);

    if (selectedTeacher) {
      // Get current date and calculate date 7 days ago
      const currentDate = new Date();
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(currentDate.getDate() - 7);

      // Filter attendance records from the last 7 days
      const filteredAttendance = (selectedTeacher.attendance || [])
        .filter(record => !selectedDate || record.date === selectedDate)
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 7); // Take only the first 7 records after sorting

      const filteredLeaveRequests = (selectedTeacher.leaveRequests || []).filter(record =>
        !selectedDate || record.date === selectedDate
      );

      setFilteredData({
        attendance: filteredAttendance,
        leaveRequests: filteredLeaveRequests
      });
    }
  };

  // Format date for display
  const formatDate = (dateString) => {
    const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('en-US', options);
  };

  // Get selected teacher details
  const selectedTeacher = teacherList.find(teacher => teacher._id === selectedTeacherId);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="px-6 py-[19px] flex items-center justify-between">
          <h1 className="text-2xl font-semibold text-gray-800">
            Manage Teacher Attendance
          </h1>
        </div>
      </header>

      <main className="max-w-9xl mx-auto p-6">
        {/* Filters Section */}
        <div className="bg-white rounded-t-lg shadow-sm p-6 mb-1.5 border border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">Search Attendance Records</h3>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
            {/* Teacher Select */}
            <div className="md:col-span-5">
              <label className="block text-sm font-medium text-gray-700 mb-1">Select Teacher</label>
              <div className="relative">
                <select
                  className="w-full pl-3 pr-10 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 bg-white text-gray-700 appearance-none transition-colors"
                  onChange={(e) => setSelectedTeacherId(e.target.value)}
                  value={selectedTeacherId || ''}
                >
                  <option value="">Select a teacher</option>
                  {teacherList.map(teacher => (
                    <option key={teacher._id} value={teacher._id}>
                      {teacher.teacherName}
                    </option>
                  ))}
                </select>
                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
              </div>
            </div>

            {/* Date Filter */}
            <div className="md:col-span-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Date</label>
              <div className="relative">
                <input
                  type="date"
                  className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 text-gray-700 placeholder-gray-400 disabled:bg-gray-50 transition-colors"
                  onChange={(e) => setSelectedDate(e.target.value)}
                  disabled={!selectedTeacherId}
                />
              </div>
            </div>

            {/* Search Button */}
            <div className="md:col-span-3 flex items-end">
              <button
                onClick={handleSearch}
                disabled={!selectedTeacherId}
                className={`w-full h-[42px] flex items-center justify-center bg-sky-600 hover:bg-sky-700 text-white py-2.5 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500 disabled:opacity-60 disabled:cursor-not-allowed transition-colors ${isLoading ? 'opacity-80' : ''}`}
              >
                Search Records
              </button>
            </div>
          </div>
        </div>

        {hasSearched && selectedTeacher && (
  <div className="bg-white shadow-xs border border-gray-200 overflow-hidden mb-1.5 w-full transition-all hover:shadow-sm">
    {/* Compact Header */}
    <div className="flex items-center p-3">
      {/* Profile Picture with Border */}
      <div className="relative mr-3">
        <div className="h-12 w-12 rounded-lg border-1 border-gray-200 shadow-inner overflow-hidden">
          <img
            className="h-full w-full object-cover"
            src={selectedTeacher.teacherProfilePicture || 'https://randomuser.me/api/portraits/men/32.jpg'}
            alt={selectedTeacher.teacherName}
          />
        </div>
        <div className="absolute -bottom-1 -right-1 bg-white rounded-full p-0.5 shadow-xs border border-gray-100">
          <div className="bg-green-500 rounded-full p-1 flex items-center justify-center">
            <svg className="w-2 h-2 text-white" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
      </div>

      {/* Teacher Info */}
      <div className="flex-1 min-w-0">
        <div className="flex items-center justify-between">
          <h3 className="text-base font-semibold text-gray-800 truncate pr-2">{selectedTeacher.teacherName}</h3>
          <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-sky-100 text-sky-800">
            {selectedTeacher.department}
          </span>
        </div>
        <p className="text-xs text-gray-500 truncate mt-0.5">{selectedTeacher.teacherEmail}</p>
      </div>
    </div>

    {/* Enhanced Mini Stats */}
    <div className="px-3 pb-3 grid grid-cols-3 gap-2">
      <div className="bg-gray-50 rounded-md p-2 text-center border border-gray-200">
        <div className="text-sm font-bold text-gray-800">{(selectedTeacher.attendance || []).length}</div>
        <div className="text-[10px] text-gray-500 uppercase tracking-wider mt-0.5">Days</div>
      </div>
      <div className="bg-green-50 rounded-md p-2 text-center border border-green-200">
        <div className="text-sm font-bold text-green-700">
          {(selectedTeacher.attendance || []).filter(a => a.status === 'present').length}
        </div>
        <div className="text-[10px] text-green-600 uppercase tracking-wider mt-0.5">Present</div>
      </div>
      <div className="bg-red-50 rounded-md p-2 text-center border border-red-200">
        <div className="text-sm font-bold text-red-700">
          {(selectedTeacher.attendance || []).filter(a => a.status === 'absent').length}
        </div>
        <div className="text-[10px] text-red-600 uppercase tracking-wider mt-0.5">Absent</div>
      </div>
    </div>

    {/* Minimal Footer */}
    <div className="px-3 py-2 bg-gray-50 border-t border-gray-100 flex justify-end">
      <button className="text-xs font-medium text-blue-600 hover:text-blue-800 flex items-center">
        More details
        <svg className="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
)}

        {/* Data Section */}
        {hasSearched ? (
          <div className="space-y-6">
            {/* Enhanced Tabs */}
            <div className="bg-white rounded-b-lg shadow-sm overflow-hidden border border-gray-200">
              {/* Tab Headers */}
              <div className="flex border-b border-gray-200">
                <button
                  className={`px-6 py-4 font-medium text-sm flex items-center focus:outline-none transition-colors duration-150 ${activeTab === 'attendance' ? 'text-sky-600 border-b-2 border-sky-500 bg-sky-50/50' : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'}`}
                  onClick={() => setActiveTab('attendance')}
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                  </svg>
                  Attendance Records
                  <span className="ml-2 bg-sky-100 text-sky-800 px-2 py-0.5 rounded-full text-xs font-medium">
                    {filteredData.attendance.length}
                  </span>
                </button>
                <button
                  className={`px-6 py-4 font-medium text-sm flex items-center focus:outline-none transition-colors duration-150 ${activeTab === 'leaveRequests' ? 'text-sky-600 border-b-2 border-sky-500 bg-sky-50/50' : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'}`}
                  onClick={() => setActiveTab('leaveRequests')}
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Leave Requests
                  {filteredData.leaveRequests.filter(r => r.status === 'pending').length > 0 ? (
                    <span className="ml-2 bg-rose-100 text-rose-800 px-2 py-0.5 rounded-full text-xs font-medium">
                      {filteredData.leaveRequests.filter(r => r.status === 'pending').length} Pending
                    </span>
                  ) : (
                    <span className="ml-2 bg-gray-100 text-gray-800 px-2 py-0.5 rounded-full text-xs font-medium">
                      {filteredData.leaveRequests.length}
                    </span>
                  )}
                </button>
              </div>

              {/* Tab Content */}
              <div className="p-6">
                {activeTab === 'attendance' ? (
                  <div className="overflow-x-auto">
                    {filteredData.attendance.length > 0 ? (
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Day</th>
                            <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {filteredData.attendance.map((record) => {
                            const date = new Date(record.date);
                            const day = date.toLocaleDateString('en-US', { weekday: 'short' });
                            return (
                              <tr key={record._id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm font-medium text-gray-900">{formatDate(record.date)}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-500">{day}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-center">
                                  <StatusBadge status={record.status} />
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-center">
                                  <div className="flex items-center justify-center space-x-2">
                                    <span className={`px-2 py-1 rounded text-xs font-medium ${record.checkIn !== '-' ? 'bg-emerald-100 text-emerald-800' : 'bg-gray-100 text-gray-800'}`}>
                                      {record.checkIn}
                                    </span>
                                    <span className="text-gray-400">→</span>
                                    <span className={`px-2 py-1 rounded text-xs font-medium ${record.checkOut !== '-' ? 'bg-emerald-100 text-emerald-800' : 'bg-gray-100 text-gray-800'}`}>
                                      {record.checkOut}
                                    </span>
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  <div className="space-x-3">
                                    {record.leaveRequest && (
                                      <button
                                        onClick={() => {
                                          setSelectedLeave(record);
                                          setIsLeaveModalVisible(true);
                                        }}
                                        className="text-sky-600 hover:text-sky-800 text-sm font-medium inline-flex items-center"
                                      >
                                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                        </svg>
                                        View Leave
                                      </button>
                                    )}
                                    {record.lateReason && (
                                      <button
                                        onClick={() => {
                                          setSelectedReason(record.lateReason);
                                          setIsReasonModalVisible(true);
                                        }}
                                        className="text-amber-600 hover:text-amber-800 text-sm font-medium inline-flex items-center"
                                      >
                                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                        Late Reason
                                      </button>
                                    )}
                                  </div>
                                </td>
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                    ) : (
                      <div className="text-center py-12">
                        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        <h3 className="mt-2 text-sm font-medium text-gray-900">No attendance records</h3>
                        <p className="mt-1 text-sm text-gray-500">
                          {selectedDate
                            ? `No attendance found for ${formatDate(selectedDate)}`
                            : 'No attendance records available for the last 7 days'}
                        </p>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    {filteredData.leaveRequests.length > 0 ? (
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Day</th>
                            <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                            <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Reason</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {filteredData.leaveRequests.map((record) => {
                            const date = new Date(record.date);
                            const day = date.toLocaleDateString('en-US', { weekday: 'short' });
                            return (
                              <tr key={record._id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm font-medium text-gray-900">{formatDate(record.date)}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-500">{day}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-center">
                                  <TypeBadge type={record.type} />
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-center">
                                  <StatusBadge status={record.status} />
                                </td>
                                <td className="px-6 py-4 text-sm text-gray-500 max-w-xs truncate text-center">
                                  {record.reason}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  <button
                                    onClick={() => {
                                      setSelectedLeave(record);
                                      setIsLeaveModalVisible(true);
                                    }}
                                    className="text-sky-600 hover:text-sky-800 font-medium inline-flex items-center"
                                  >
                                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                    Details
                                  </button>
                                </td>
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                    ) : (
                      <div className="text-center py-12">
                        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                        </svg>
                        <h3 className="mt-2 text-sm font-medium text-gray-900">No leave requests</h3>
                        <p className="mt-1 text-sm text-gray-500">
                          {selectedDate
                            ? `No leave requests found for ${formatDate(selectedDate)}`
                            : 'No leave requests available for this teacher'}
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-sm text-center py-16 border border-gray-200">
            <div className="text-gray-300 mb-4">
              <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
              </svg>
            </div>
            <h3 className="text-lg font-medium text-gray-700">No records loaded</h3>
            <p className="text-gray-500 mt-2 max-w-md mx-auto">
              Select a teacher and click "Search Records" to view attendance data
            </p>
          </div>
        )}
      </main>

      {/* Professional Leave Request Modal */}
      {isLeaveModalVisible && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          {/* Backdrop */}
          <div
            className="absolute inset-0 bg-gray-900/50 backdrop-blur-sm"
            onClick={() => setIsLeaveModalVisible(false)}
          />

          {/* Modal Container */}
          <div className="relative w-full max-w-md bg-white rounded-lg shadow-xl overflow-hidden border border-gray-200">
            {/* Header */}
            <div className="px-6 py-4 border-b border-gray-100 bg-gray-50">
              <div className="flex items-center">
                <div className="flex-shrink-0 p-2 rounded-md bg-sky-100 text-sky-600">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-lg font-semibold text-gray-900">Leave Request Details</h3>
                  <p className="text-sm text-gray-500">
                    {selectedLeave?.date ? formatDate(selectedLeave.date) : 'No date specified'}
                  </p>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="px-6 py-4 space-y-4">
              {/* Status Row */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-1">Status</p>
                  <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-sky-100 text-sky-800">
                    {selectedLeave?.status || 'Pending'}
                  </div>
                </div>
                <div>
                  <p className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-1">Type</p>
                  <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">
                    {selectedLeave?.type || 'N/A'}
                  </div>
                </div>
              </div>

              {/* Reason Section */}
              <div>
                <p className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">Reason</p>
                <div className="p-3 bg-gray-50 rounded-md border border-gray-100">
                  <p className="text-gray-800">
                    {selectedLeave?.reason || 'No reason provided'}
                  </p>
                </div>
              </div>

              {/* Notes Section */}
              {selectedLeave?.notes && (
                <div>
                  <p className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">Notes</p>
                  <div className="p-3 bg-gray-50 rounded-md border border-gray-100">
                    <p className="text-gray-800">
                      {selectedLeave.notes}
                    </p>
                  </div>
                </div>
              )}

              {/* Time Section */}
              {selectedLeave?.checkIn && selectedLeave?.checkOut && (
                <div>
                  <p className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">Time</p>
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-md border border-gray-100">
                    <div className="text-center">
                      <p className="text-xs text-gray-500">Check In</p>
                      <p className="font-medium">{selectedLeave.checkIn}</p>
                    </div>
                    <div className="text-gray-300">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 5l7 7-7 7M5 5l7 7-7 7"></path>
                      </svg>
                    </div>
                    <div className="text-center">
                      <p className="text-xs text-gray-500">Check Out</p>
                      <p className="font-medium">{selectedLeave.checkOut}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Footer with all action buttons */}
            <div className="px-6 py-4 bg-gray-50 border-t border-gray-100 flex justify-between">
              <button
                onClick={() => setIsLeaveModalVisible(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
              >
                Close
              </button>
              <div className="space-x-3">
                <button
                  className="px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-red-500 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                >
                  Reject
                </button>
                <button
                  className="px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                >
                  Approve
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Professional Late Arrival Reason Modal */}
      {isReasonModalVisible && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          {/* Semi-transparent backdrop */}
          <div
            className="absolute inset-0 bg-gray-900/30"
            onClick={() => setIsReasonModalVisible(false)}
          />

          {/* Modal card */}
          <div className="relative w-full max-w-md bg-white rounded-lg shadow-2xl overflow-hidden border border-gray-200 transform transition-all">
            {/* Header with accent border */}
            <div className="border-t-4 border-amber-500">
              <div className="px-6 py-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <svg className="h-6 w-6 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-lg font-semibold text-gray-900">Late Arrival Documentation</h3>
                    <p className="text-sm text-gray-500">Employee-submitted explanation</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Content area */}
            <div className="px-6 py-4">
              <div className="space-y-4">
                {/* Reason section */}
                <div>
                  <h4 className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">
                    Submitted Reason
                  </h4>
                  <div className="p-4 bg-gray-50 rounded border border-gray-200">
                    <p className="text-gray-800">
                      {selectedReason || 'No explanation was provided'}
                    </p>
                  </div>
                </div>

                {/* Additional context (optional) */}
                <div className="flex items-start text-sm">
                  <svg className="flex-shrink-0 h-5 w-5 text-gray-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <p className="ml-2 text-gray-600">
                    This explanation was submitted by the employee at time of arrival.
                  </p>
                </div>
              </div>
            </div>

            {/* Action buttons */}
            <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-between">
              <button
                onClick={() => setIsReasonModalVisible(false)}
                className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 focus:outline-none"
              >
                Close
              </button>
              <div className="space-x-3">
                <button
                  className="px-4 py-2 text-sm font-medium text-white bg-gray-800 hover:bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                >
                  Acknowledge
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminTeacherAttendance_Page;
