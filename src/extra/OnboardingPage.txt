import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaExternalLinkAlt } from "react-icons/fa";
import { useDispatch, useSelector } from 'react-redux';
import { toast } from 'react-toastify';
import { getSchoolsByUserId } from '../../store/Admin-Slicer/Admin-Slicer';
import { MdVerified } from "react-icons/md";
import { IoMdTime } from "react-icons/io";
import { FaTimes } from "react-icons/fa";

const OnboardingPage = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { user } = useSelector((state) => state.auth);
  const { isLoading, schools } = useSelector((state) => state.adminSchool);

  const MAX_SCHOOLS_FREE_PLAN = 2;

  const fetchSchoolByUserId = () => {
    dispatch(getSchoolsByUserId(user.id))
      .then((res) => {
        if (res.payload?.status === "Error") {
          toast.error(res.payload.message);
        }
      })
      .catch((err) => {
        console.log(err.message);
        toast.error("An unexpected error occurred.");
      });
  };

  useEffect(() => {
    fetchSchoolByUserId();
  }, []);

  const handleCreateSchool = () => {
    if (schools?.length >= MAX_SCHOOLS_FREE_PLAN) {
      toast.info(`Free plan allows only ${MAX_SCHOOLS_FREE_PLAN} schools`);
      return;
    }
    navigate("/admin/createSchool");
  };

  const handleWebsiteClick = (e, websiteUrl) => {
    e.stopPropagation();
    window.open(websiteUrl, '_blank', 'noopener,noreferrer');
  };

  const handleSchoolClick = (school) => {
    switch (school.verificationStatus) {
      case 'Verified':
        navigate(`/admin/dashboard/${school._id}`);
        break;
      case 'Pending':
        toast.info('Your school is under verification. Please wait for approval.');
        break;
      case 'Rejected':
        toast.error('Your school verification was rejected. Please contact support.');
        break;
      default:
        toast.warning('Verification status unknown. Please contact support.');
    }
  };

  const CircularLoader = () => (
    <div className="w-full flex justify-center items-center py-10">
      <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-sky-500"></div>
    </div>
  );

  return (
    <div
      className="min-h-screen w-full bg-cover bg-center flex items-center justify-center px-4"
      style={{
        backgroundImage: `url('https://cdn.pixabay.com/photo/2022/05/24/04/38/study-7217599_1280.jpg')`,
      }}
    >
      <div className="w-full max-w-md bg-white bg-opacity-90 backdrop-blur-sm border-gray-400 border-[0.5px] p-1 rounded-xl shadow-lg">
        <div className="bg-white rounded-xl shadow-xl overflow-hidden">

          <div className="bg-gray-50 px-6 py-4 flex justify-between items-center border-b border-gray-200">
            <div>
              <h1 className="text-xl font-semibold text-gray-800">Your Schools</h1>
              <p className="text-sm text-gray-500 mt-1">Manage or create your school profiles</p>
            </div>
          </div>

          <div className="p-6 max-h-[60vh] overflow-y-auto">
            {isLoading ? (
              <div className="bg-white rounded-lg p-4 mb-3">
                <CircularLoader />
              </div>
            ) : (
              <>
                {schools && schools.length ? (
                  schools.map((school) => (
                    <div
                      onClick={() => handleSchoolClick(school)}
                      key={school._id}
                      className={`border-gray-200 relative flex items-center bg-white rounded-lg border shadow-sm p-4 transition-all mb-3`}
                    >
                      {/* Verification Status Badge - Top Right Corner */}
                      <div className={`absolute -top-2 -right-2 px-2 py-1 rounded-full text-xs font-medium flex items-center ${school.verificationStatus === 'Verified'
                        ? 'bg-green-100 text-green-800 border border-green-200'
                        : school.verificationStatus === 'Pending'
                          ? 'bg-amber-100 text-amber-900 border border-amber-200'
                          : 'bg-red-100 text-red-800 border border-red-200'
                        }`}>
                        {school.verificationStatus === 'Verified' && (
                          <>
                            <MdVerified className="mr-1" />
                            <span>Verified</span>
                          </>
                        )}
                        {school.verificationStatus === 'Pending' && (
                          <>
                            <IoMdTime className="mr-1" />
                            <span>Pending</span>
                          </>
                        )}
                        {school.verificationStatus === 'Rejected' && (
                          <>
                            <FaTimes className="mr-1" />
                            <span>Rejected</span>
                          </>
                        )}
                      </div>

                      <div className="flex items-center flex-1 cursor-pointer">
                        <div className="flex-shrink-0 w-12 h-12 rounded-full bg-sky-400 text-white flex items-center justify-center font-bold text-lg overflow-hidden">
                          <img
                            src={school.schoolLogo}
                            alt="School Logo"
                            className="w-full h-full object-cover rounded-full"
                          />
                        </div>
                        <div className="ml-4 flex-1">
                          <div className="flex justify-between items-start">
                            <h3 className="text-sm font-semibold text-gray-800">{school.schoolName}</h3>
                          </div>
                          <div className="text-xs text-gray-500 mt-1 flex gap-4">
                            <span>{school.noOfStudent} students</span>
                            <span>{school.noOfTeacher} teachers</span>
                          </div>
                        </div>
                      </div>
                      {school.website && (
                        <button
                          onClick={(e) => handleWebsiteClick(e, school.website)}
                          className="ml-2 text-gray-400 hover:text-sky-500 p-1 rounded-full hover:bg-gray-100 transition-colors"
                          title="Visit school website"
                        >
                          <FaExternalLinkAlt />
                        </button>
                      )}
                    </div>
                  ))
                ) : (
                  <div className="text-center text-gray-500 text-sm py-10 border border-gray-200 rounded-xl bg-white shadow-sm">
                    No schools yet
                  </div>
                )}

                <div
                  onClick={handleCreateSchool}
                  className="flex items-center bg-white rounded-lg border border-dashed border-gray-300 hover:border-sky-400 p-4 cursor-pointer transition mt-3"
                >
                  <div className="w-12 h-12 rounded-full bg-sky-100 text-sky-500 flex items-center justify-center">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-sm font-semibold text-gray-700">Add New School</h3>
                    <p className="text-xs text-gray-500 mt-1">
                      {schools?.length === 0
                        ? "Start by creating your first institution"
                        : "Add another school to your account"}
                    </p>
                  </div>
                </div>
              </>
            )}
          </div>

          <div className="bg-gray-50 px-6 py-3 border-t border-gray-200 text-center text-sm text-gray-500">
            Need help? <a onClick={() => navigate("/admin/contactSupport")} className="text-sky-600 hover:underline cursor-pointer">Contact support</a>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OnboardingPage;