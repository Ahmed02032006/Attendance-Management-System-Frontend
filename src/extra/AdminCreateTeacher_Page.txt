import React, { useState, useRef, useEffect, createRef } from 'react';
import { User, Mail, Lock, Camera, Phone, GraduationCap, ChevronDown, DollarSign, Hash } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { toast } from 'react-toastify';
import { createTeacher } from '../../store/Admin-Slicer/Admin-Teacher-Slicer';
import axios from 'axios';

const AdminCreateTeacher_Page = () => {
  const inputRef = createRef(null);
  const [imageFile, setImageFile] = useState(false);
  const [isImageLoading, setIsImageLoading] = useState(false);
  const [uploadedImageUrl, setUploadImageUrl] = useState("");
  const [imageUrl, setImageUrl] = useState("");

  const id = sessionStorage.getItem("currentSchoolId") || null;

  const initialFormData = {
    teacherId: '',
    teacherName: '',
    teacherEmail: '',
    teacherPassword: '',
    teacherProfilePicture: imageUrl,
    schoolId: id,
    department: '',
    contact: '',
    userRole: 'Teacher',
    status: 'Active',
    qualification: '',
    teacherGender: '',
    salary: '',
    experienceYears: ''
  };

  const [formData, setFormData] = useState(initialFormData);
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const [dropdownOpen, setDropdownOpen] = useState({
    school: false,
    department: false,
    teacherGender: false
  });

  const dropdownRefs = {
    school: useRef(null),
    department: useRef(null),
    teacherGender: useRef(null)
  };

  const departments = [
    'Computer Science',
    'Mathematics',
    'Physics',
    'Chemistry',
    'Biology',
    'English',
    'History',
    'Economics'
  ];

  const teacherGenderOptions = ['Male', 'Female', 'Other'];

  useEffect(() => {
    const handleClickOutside = (event) => {
      Object.keys(dropdownRefs).forEach((key) => {
        if (dropdownRefs[key].current && !dropdownRefs[key].current.contains(event.target)) {
          setDropdownOpen(prev => ({ ...prev, [key]: false }));
        }
      });
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setImageFile(selectedFile);
      setUploadImageUrl(URL.createObjectURL(selectedFile));

      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData(prev => ({
          ...prev,
          teacherProfilePicture: URL.createObjectURL(selectedFile)
        }));
      };
      reader.readAsDataURL(selectedFile);
    }
  };

  const uploadImage = async () => {
    try {
      setIsImageLoading(true);
      const data = new FormData();
      data.append("file", imageFile);
      const response = await axios.post("http://localhost:5000/api/v1/media/upload-image", data);
      if (response.status == 200) {
        setUploadImageUrl(response?.data?.result?.url);
      }
      setImageUrl(response?.data?.result?.url);
    } catch (error) {
      console.log(error);
    } finally {
      setIsImageLoading(false);
    }
  }

  useEffect(() => {
    if (imageFile) {
      uploadImage();
    }
  }, [imageFile]);

  const toggleDropdown = (dropdown) => {
    setDropdownOpen(prev => ({
      ...prev,
      [dropdown]: !prev[dropdown],
      ...(dropdown === 'school' ? { department: false, teacherGender: false } :
        dropdown === 'department' ? { school: false, teacherGender: false } :
          { school: false, department: false })
    }));
  };

  const handleSelect = (name, value) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    setDropdownOpen(prev => ({
      ...prev,
      [name === 'schoolId' ? 'school' : name]: false
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(createTeacher({ ...formData, teacherProfilePicture: imageUrl }))
      .then((res) => {
        if (res.payload?.status === "Success") {
          toast.success('Teacher Created Successfully');
          setFormData(initialFormData);
          setImageUrl("");
        } else if (res.payload?.status === "Error") {
          toast.error(res.payload.message || "Teacher Creation failed.");
        }
      })
      .catch((err) => {
        toast.error("An unexpected error occurred.");
      });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white border-b border-gray-200">
        <div className="px-6 py-[19px] flex items-center justify-between">
          <h1 className="text-2xl font-medium text-gray-800">
            Admin Create Teacher Page
          </h1>
        </div>
      </header>

      <div className="p-6 max-w-6xl mx-auto">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-semibold text-gray-800">
                Teacher Registration Form
              </h2>
              <div className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                <span className="font-medium">All fields marked with * are required</span>
              </div>
            </div>
          
            <form onSubmit={handleSubmit}>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                {/* Personal Information */}
                <div className="space-y-4">
                  <h3 className="text-md font-medium text-gray-700 pb-2 border-b border-gray-200">
                    Personal Information
                  </h3>
                  
                  {/* Profile Picture */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Profile Photo</label>
                    <div className="flex items-start space-x-4">
                      <div className="relative group">
                        {formData.teacherProfilePicture ? (
                          <>
                            <div className="h-20 w-20 rounded-md overflow-hidden border border-gray-200 shadow-sm">
                              <img 
                                src={formData.teacherProfilePicture} 
                                alt="Profile" 
                                className="h-full w-full object-cover"
                              />
                            </div>
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({...prev, teacherProfilePicture: ''}));
                                setImageUrl("");
                              }}
                              className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          </>
                        ) : (
                          <div className="h-20 w-20 rounded-md bg-gray-100 border border-dashed border-gray-300 flex items-center justify-center hover:border-sky-400 transition-colors cursor-pointer">
                            <Camera className="h-5 w-5 text-gray-400 group-hover:text-sky-500" />
                          </div>
                        )}
                        <input
                          ref={inputRef}
                          type="file"
                          name="teacherProfilePicture"
                          onChange={handleFileChange}
                          accept="image/*"
                          className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                        />
                      </div>
                      <div className="text-xs text-gray-500">
                        <p className="font-medium text-gray-600 mb-1">Upload requirements:</p>
                        <ul className="space-y-1">
                          <li>• JPG or PNG format</li>
                          <li>• Max size: 2MB</li>
                          <li>• 400×400px recommended</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* Teacher ID */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Teacher ID *</label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Hash className="h-4 w-4 text-gray-400" />
                      </div>
                      <input
                        type="text"
                        name="teacherId"
                        value={formData.teacherId}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="TCH-001"
                        required
                      />
                    </div>
                  </div>

                  {/* Full Name */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Full Name *</label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <User className="h-4 w-4 text-gray-400" />
                      </div>
                      <input
                        type="text"
                        name="teacherName"
                        value={formData.teacherName}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="John Doe"
                        required
                      />
                    </div>
                  </div>

                  {/* Gender */}
                  <div ref={dropdownRefs.teacherGender}>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Gender *</label>
                    <div className="relative">
                      <button
                        type="button"
                        onClick={() => toggleDropdown('teacherGender')}
                        className={`flex items-center justify-between w-full px-3 py-2 text-sm border ${formData.teacherGender ? 'border-gray-300' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 bg-white text-left`}
                      >
                        <span className={formData.teacherGender ? 'text-gray-800' : 'text-gray-400'}>
                          {formData.teacherGender || 'Select Gender'}
                        </span>
                        <ChevronDown className={`h-4 w-4 text-gray-400 transition-transform ${dropdownOpen.teacherGender ? 'transform rotate-180' : ''}`} />
                      </button>
                      {dropdownOpen.teacherGender && (
                        <div className="absolute z-10 mt-1 w-full bg-white shadow-md rounded-md py-1 border border-gray-200 max-h-60 overflow-auto">
                          {teacherGenderOptions.map(option => (
                            <div
                              key={option}
                              onClick={() => handleSelect('teacherGender', option)}
                              className={`px-3 py-2 cursor-pointer hover:bg-gray-50 text-sm ${formData.teacherGender === option ? 'bg-gray-50 text-sky-600' : 'text-gray-700'}`}
                            >
                              {option}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Email */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Mail className="h-4 w-4 text-gray-400" />
                      </div>
                      <input
                        type="email"
                        name="teacherEmail"
                        value={formData.teacherEmail}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="john.doe@example.com"
                        required
                      />
                    </div>
                  </div>

                  {/* Password */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Password *</label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Lock className="h-4 w-4 text-gray-400" />
                      </div>
                      <input
                        type="text"
                        name="teacherPassword"
                        value={formData.teacherPassword}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="Set a password"
                        required
                      />
                    </div>
                  </div>
                </div>

                {/* Professional Information */}
                <div className="space-y-4">
                  <h3 className="text-md font-medium text-gray-700 pb-2 border-b border-gray-200">
                    Professional Information
                  </h3>

                  {/* Department */}
                  <div ref={dropdownRefs.department}>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Department *</label>
                    <div className="relative">
                      <button
                        type="button"
                        onClick={() => toggleDropdown('department')}
                        className={`flex items-center justify-between w-full px-3 py-2 text-sm border ${formData.department ? 'border-gray-300' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 bg-white text-left`}
                      >
                        <span className={formData.department ? 'text-gray-800' : 'text-gray-400'}>
                          {formData.department || 'Select Department'}
                        </span>
                        <ChevronDown className={`h-4 w-4 text-gray-400 transition-transform ${dropdownOpen.department ? 'transform rotate-180' : ''}`} />
                      </button>
                      {dropdownOpen.department && (
                        <div className="absolute z-10 mt-1 w-full bg-white shadow-md rounded-md py-1 border border-gray-200 max-h-60 overflow-auto">
                          {departments.map(dept => (
                            <div
                              key={dept}
                              onClick={() => handleSelect('department', dept)}
                              className={`px-3 py-2 cursor-pointer hover:bg-gray-50 text-sm ${formData.department === dept ? 'bg-gray-50 text-sky-600' : 'text-gray-700'}`}
                            >
                              {dept}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Contact */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Contact Number *</label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Phone className="h-4 w-4 text-gray-400" />
                      </div>
                      <input
                        type="tel"
                        name="contact"
                        value={formData.contact}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="+1 (555) 123-4567"
                        required
                      />
                    </div>
                  </div>

                  {/* Qualification */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Qualification *</label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <GraduationCap className="h-4 w-4 text-gray-400" />
                      </div>
                      <input
                        type="text"
                        name="qualification"
                        value={formData.qualification}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="M.Sc. in Computer Science"
                        required
                      />
                    </div>
                  </div>

                  {/* Experience */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Experience (Years) *</label>
                    <div className="relative">
                      <input
                        type="number"
                        name="experienceYears"
                        value={formData.experienceYears}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="5"
                        min="0"
                        max="50"
                        required
                      />
                      <span className="absolute right-3 top-2 text-gray-400 text-sm">years</span>
                    </div>
                  </div>

                  {/* Salary */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Salary *</label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <DollarSign className="h-4 w-4 text-gray-400" />
                      </div>
                      <input
                        type="number"
                        name="salary"
                        value={formData.salary}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500"
                        placeholder="50000.00"
                        min="0"
                        step="0.01"
                        required
                      />
                    </div>
                  </div>

                  {/* Status */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Status *</label>
                    <select
                      name="status"
                      value={formData.status}
                      onChange={handleChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500 appearance-none"
                      required
                    >
                      <option value="Active">Active</option>
                      <option value="Inactive">Inactive</option>
                      <option value="On Leave">On Leave</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Form Actions */}
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => {
                    setFormData(initialFormData);
                    setImageUrl("");
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-sky-500"
                >
                  Reset Form
                </button>
                <button
                  type="submit"
                  className="px-5 py-2 bg-sky-600 text-white rounded-md hover:bg-sky-700 focus:outline-none focus:ring-1 focus:ring-sky-500"
                >
                  Create Teacher
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminCreateTeacher_Page;