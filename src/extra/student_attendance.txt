import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import HeaderComponent from '../../components/HeaderComponent';

const StudentAttendance_Page = () => {
  const [formData, setFormData] = useState({
    studentName: '',
    rollNo: '',
    uniqueCode: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [qrData, setQrData] = useState(null);

  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    // Check if QR code data is passed via state
    if (location.state?.qrData) {
      try {
        const parsedData = JSON.parse(location.state.qrData);
        setQrData(parsedData);
        setFormData(prev => ({
          ...prev,
          uniqueCode: parsedData.code
        }));
      } catch (error) {
        toast.error('Invalid QR code data');
        navigate('/'); // Redirect to home if QR data is invalid
      }
    } else {
      // If no QR data, check URL parameters (for direct access with code)
      const urlParams = new URLSearchParams(location.search);
      const code = urlParams.get('code');
      const subject = urlParams.get('subject');
      
      if (code) {
        setQrData({
          code,
          subject: subject || 'Unknown Subject',
          type: 'attendance'
        });
        setFormData(prev => ({
          ...prev,
          uniqueCode: code
        }));
      } else {
        toast.error('No attendance code found');
        navigate('/');
      }
    }
  }, [location, navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.studentName.trim() || !formData.rollNo.trim() || !formData.uniqueCode.trim()) {
      toast.error('Please fill all fields');
      return;
    }

    if (!qrData) {
      toast.error('Invalid attendance session');
      return;
    }

    setIsSubmitting(true);

    try {
      // Simulate API call to submit attendance
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // In real application, you would make an API call here
      console.log('Attendance submitted:', {
        ...formData,
        subject: qrData.subject,
        timestamp: new Date().toISOString()
      });

      toast.success('Attendance submitted successfully!');
      
      // Reset form after successful submission
      setFormData({
        studentName: '',
        rollNo: '',
        uniqueCode: formData.uniqueCode // Keep the unique code
      });

      // Optional: Redirect after success or keep on page for multiple entries
      // navigate('/success');

    } catch (error) {
      toast.error('Failed to submit attendance. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleScanAgain = () => {
    navigate('/');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <HeaderComponent 
        heading={"Student Attendance"} 
        subHeading={"Submit your attendance"} 
        role='student'
      />

      <div className="container mx-auto max-w-2xl p-6">
        <div className="bg-white rounded-lg shadow-md border border-gray-200">
          {/* Header */}
          <div className="px-6 py-4 border-b border-gray-200 bg-sky-50 rounded-t-lg">
            <h2 className="text-xl font-semibold text-gray-800">Mark Your Attendance</h2>
            {qrData && (
              <div className="mt-2 text-sm text-gray-600">
                <p><span className="font-medium">Subject:</span> {qrData.subject}</p>
                <p><span className="font-medium">Code:</span> {qrData.code}</p>
              </div>
            )}
          </div>

          {/* Attendance Form */}
          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Student Name */}
            <div>
              <label htmlFor="studentName" className="block text-sm font-medium text-gray-700 mb-2">
                Full Name *
              </label>
              <input
                type="text"
                id="studentName"
                name="studentName"
                value={formData.studentName}
                onChange={handleInputChange}
                placeholder="Enter your full name"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-colors"
                required
              />
            </div>

            {/* Roll Number */}
            <div>
              <label htmlFor="rollNo" className="block text-sm font-medium text-gray-700 mb-2">
                Roll Number *
              </label>
              <input
                type="text"
                id="rollNo"
                name="rollNo"
                value={formData.rollNo}
                onChange={handleInputChange}
                placeholder="Enter your roll number"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-colors"
                required
              />
            </div>

            {/* Unique Code (Read-only) */}
            <div>
              <label htmlFor="uniqueCode" className="block text-sm font-medium text-gray-700 mb-2">
                Attendance Code
              </label>
              <input
                type="text"
                id="uniqueCode"
                name="uniqueCode"
                value={formData.uniqueCode}
                readOnly
                className="w-full px-3 py-2 border border-gray-300 bg-gray-100 rounded-md focus:outline-none cursor-not-allowed"
              />
              <p className="mt-1 text-xs text-gray-500">This code is automatically filled from the QR code</p>
            </div>

            {/* Submit Button */}
            <div className="flex flex-col sm:flex-row gap-3 pt-4">
              <button
                type="submit"
                disabled={isSubmitting || !qrData}
                className="flex-1 bg-sky-600 text-white py-3 px-4 rounded-md hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
              >
                {isSubmitting ? (
                  <span className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Submitting...
                  </span>
                ) : (
                  'Submit Attendance'
                )}
              </button>
              
              <button
                type="button"
                onClick={handleScanAgain}
                className="px-6 py-3 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors font-medium"
              >
                Scan Again
              </button>
            </div>
          </form>

          {/* Instructions */}
          <div className="px-6 py-4 border-t border-gray-200 bg-gray-50 rounded-b-lg">
            <h3 className="text-sm font-medium text-gray-700 mb-2">Instructions:</h3>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Fill in your full name and roll number</li>
              <li>• Ensure the attendance code matches your class</li>
              <li>• Click "Submit Attendance" to mark your presence</li>
              <li>• You can submit multiple times if needed</li>
            </ul>
          </div>
        </div>

        {/* Success Message Example */}
        {false && ( // This is just for demonstration - you can conditionally show this
          <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center">
              <svg className="h-5 w-5 text-green-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <span className="text-green-800 font-medium">Attendance submitted successfully!</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default StudentAttendance_Page;