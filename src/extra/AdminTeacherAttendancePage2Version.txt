this is my admin teacher attendance management page : 

import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { getTeachersBySchoolId } from '../../store/Admin-Slicer/Admin-Teacher-Slicer';

const AdminTeacherAttendance_Page = () => {
  const [selectedTeacher, setSelectedTeacher] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const [activeTab, setActiveTab] = useState('attendance');
  const [isLeaveModalVisible, setIsLeaveModalVisible] = useState(false);
  const [isReasonModalVisible, setIsReasonModalVisible] = useState(false);
  const [selectedLeave, setSelectedLeave] = useState(null);
  const [selectedReason, setSelectedReason] = useState(null);
  const [filteredData, setFilteredData] = useState({
    attendance: [],
    leaveRequests: []
  });

  const { isLoading, teachers } = useSelector((state) => state.adminTeacher);
  const dispatch = useDispatch();
  const id = sessionStorage.getItem("currentSchoolId") || null;

  useEffect(() => {
    if (!id) return;
    dispatch(getTeachersBySchoolId(id));
  }, [dispatch, id]);

  const teacherList = Array.isArray(teachers) ? teachers : teachers ? [teachers] : [];

  // Status badge component
  const StatusBadge = ({ status }) => {
    const colorClasses = {
      present: 'bg-green-100 text-green-800',
      absent: 'bg-red-100 text-red-800',
      late: 'bg-yellow-100 text-yellow-800',
      approved: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800',
      pending: 'bg-blue-100 text-blue-800'
    };

    return (
      <span className={`px-2.5 py-1 rounded-full text-xs font-medium ${colorClasses[status] || 'bg-gray-100 text-gray-800'}`}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  // Type badge component
  const TypeBadge = ({ type }) => {
    const colorClasses = {
      sick: 'bg-red-100 text-red-800',
      personal: 'bg-indigo-100 text-indigo-800',
      professional: 'bg-purple-100 text-purple-800'
    };

    return (
      <span className={`px-2.5 py-1 rounded-full text-xs font-medium ${colorClasses[type] || 'bg-gray-100 text-gray-800'}`}>
        {type.charAt(0).toUpperCase() + type.slice(1)}
      </span>
    );
  };

  // Format date for display
  const formatDate = (dateString) => {
    const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('en-US', options);
  };

  // Get day from date
  const getDayFromDate = (dateString) => {
    const options = { weekday: 'short' };
    return new Date(dateString).toLocaleDateString('en-US', options);
  };

  // Load teacher data when selected
  const handleSelectTeacher = (teacher) => {
    setSelectedTeacher(teacher);
    setSelectedDate(null);

    // Create new arrays before sorting to avoid mutation
    const teacherAttendance = Array.from(teacher.attendance || []);
    const teacherLeaveRequests = Array.from(teacher.leaveRequests || []);

    // Filter attendance records from the last 7 days
    const filteredAttendance = teacherAttendance
      .sort((a, b) => new Date(b.date) - new Date(a.date))
      .slice(0, 7);

    setFilteredData({
      attendance: filteredAttendance,
      leaveRequests: teacherLeaveRequests
    });
  };

  // Filter data by date when date is selected
  const handleDateFilter = (date) => {
    setSelectedDate(date);

    // Create new arrays before sorting to avoid mutation
    const teacherAttendance = Array.from(selectedTeacher.attendance || []);
    const teacherLeaveRequests = Array.from(selectedTeacher.leaveRequests || []);

    if (!date) {
      setFilteredData({
        attendance: teacherAttendance
          .sort((a, b) => new Date(b.date) - new Date(a.date))
          .slice(0, 7),
        leaveRequests: teacherLeaveRequests
      });
      return;
    }

    setFilteredData({
      attendance: teacherAttendance
        .filter(record => record.date === date),
      leaveRequests: teacherLeaveRequests
        .filter(record => record.date === date)
    });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <h1 className="text-xl font-semibold text-gray-900">
            Teacher Attendance Management
          </h1>
        </div>
      </header>

      <main className="max-w-9xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
          {/* Teachers List Column - Compact */}
          <div className="lg:col-span-1">
            <div className="bg-white shadow-sm rounded-lg overflow-hidden">
              <div className="px-4 py-3 border-b border-gray-200">
                <h2 className="text-md font-medium text-gray-900">Teachers</h2>
                <p className="text-xs text-gray-500 mt-1">
                  {isLoading ? 'Loading...' : `${teacherList.length} teachers`}
                </p>
              </div>

              {isLoading ? (
                <div className="p-4">
                  <div className="animate-pulse space-y-3">
                    {[...Array(6)].map((_, i) => (
                      <div key={i} className="flex items-center space-x-3">
                        <div className="h-8 w-8 rounded-full bg-gray-200"></div>
                        <div className="flex-1 space-y-2">
                          <div className="h-3 bg-gray-200 rounded"></div>
                          <div className="h-2 bg-gray-200 rounded w-3/4"></div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <div className="divide-y divide-gray-200 max-h-[calc(100vh-180px)] overflow-y-auto">
                  {teacherList.map(teacher => (
                    <div
                      key={teacher._id}
                      onClick={() => handleSelectTeacher(teacher)}
                      className={`px-3 py-2 cursor-pointer transition-colors ${selectedTeacher?._id === teacher._id ? 'bg-blue-50' : 'hover:bg-gray-50'}`}
                    >
                      <div className="flex items-center">
                        <div className="h-8 w-8 rounded-full bg-gray-200 flex-shrink-0 overflow-hidden mr-2">
                          <img
                            className="h-full w-full object-cover"
                            src={teacher.teacherProfilePicture || 'https://randomuser.me/api/portraits/men/32.jpg'}
                            alt={teacher.teacherName}
                          />
                        </div>
                        <div className="min-w-0">
                          <p className="text-sm font-medium text-gray-900 truncate">
                            {teacher.teacherName}
                          </p>
                          <p className="text-xs text-gray-500 truncate">
                            {teacher.department}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Teacher Details and Attendance Column */}
          <div className="lg:col-span-3">
            {selectedTeacher ? (
              <>
                <div className="bg-white shadow-sm rounded-lg overflow-hidden mb-6 border border-gray-200">
                  {/* Profile Header */}
                  <div className="px-4 py-3 bg-gradient-to-r from-sky-50 to-blue-50">
                    <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
                      {/* Teacher Info - Enhanced Card */}
                      <div className="flex items-center bg-white p-3 rounded-lg shadow-xs border border-gray-200 w-full md:w-auto md:flex-1 transition-all hover:shadow-sm">
                        <div className="relative mr-3">
                          <div className="h-12 w-12 border border-gray-300 rounded-full bg-gradient-to-br from-sky-100 to-blue-100 flex-shrink-0 overflow-hidden shadow-sm">
                            <img
                              className="h-full w-full border-gray-200 object-cover"
                              src={selectedTeacher.teacherProfilePicture}
                              alt={selectedTeacher.teacherName}
                              onError={(e) => e.target.src = '/default-avatar.svg'}
                            />
                          </div>
                          {/* Active Badge */}
                          <div className="absolute -bottom-1 -right-1 bg-white rounded-full p-0.5 shadow-xs border border-gray-200">
                            <div className="h-2.5 w-2.5 rounded-full bg-green-400 border border-white"></div>
                          </div>
                        </div>

                        <div className="flex-1 min-w-0">
                          <div className="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-3">
                            <h2 className="text-lg font-semibold text-gray-800 truncate">
                              {selectedTeacher.teacherName}
                            </h2>
                            <span className="inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium bg-blue-100 text-blue-800">
                              {selectedTeacher.department}
                            </span>
                          </div>
                          <div className="flex flex-wrap items-center gap-1.5">
                            <span className="inline-flex items-center text-xs text-gray-600 bg-gray-50 px-2 py-1 rounded-md">
                              <svg className="w-3.5 h-3.5 mr-1.5 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                              </svg>
                              {selectedTeacher.teacherEmail}
                            </span>
                            <span className="inline-flex items-center text-xs text-gray-600 bg-gray-50 px-2 py-1 rounded-md">
                              <svg className="w-3.5 h-3.5 mr-1.5 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
                              </svg>
                              {selectedTeacher.location || "Main Campus"}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Attendance Dashboard - Enhanced Cards */}
                      <div className="grid grid-cols-3 gap-2 w-full md:w-auto">
                        {/* Present Days */}
                        <div className="bg-white p-2 rounded-lg shadow-xs border border-green-100 text-center transition-all hover:shadow-sm">
                          <div className="text-green-500 mb-1">
                            <svg className="w-4 h-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                          </div>
                          <p className="text-[0.65rem] font-medium text-gray-500 uppercase tracking-wider mb-0.5">Present</p>
                          <p className="text-base font-bold text-gray-800">
                            {(selectedTeacher.attendance || []).filter(a => a.status === 'present').length}
                          </p>
                        </div>

                        {/* Absent Days */}
                        <div className="bg-white p-2 rounded-lg shadow-xs border border-red-100 text-center transition-all hover:shadow-sm">
                          <div className="text-red-400 mb-1">
                            <svg className="w-4 h-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </div>
                          <p className="text-[0.65rem] font-medium text-gray-500 uppercase tracking-wider mb-0.5">Absent</p>
                          <p className="text-base font-bold text-gray-800">
                            {(selectedTeacher.attendance || []).length -
                              (selectedTeacher.attendance || []).filter(a => a.status === 'present').length}
                          </p>
                        </div>

                        {/* Leave Requests */}
                        <div className="bg-white p-2 rounded-lg shadow-xs border border-blue-100 text-center transition-all hover:shadow-sm">
                          <div className="text-blue-400 mb-1">
                            <svg className="w-4 h-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                          </div>
                          <p className="text-[0.65rem] font-medium text-gray-500 uppercase tracking-wider mb-0.5">Leaves</p>
                          <p className="text-base font-bold text-gray-800">
                            {(selectedTeacher.leaveRequests || []).length}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Progress and Filter Section */}
                  <div className="px-6 py-3 bg-white border-t border-gray-200">
                    <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
                      {/* Attendance Progress */}
                      <div className="flex-1 max-w-md">
                        <div className="flex items-center justify-between mb-1">
                          <h3 className="text-sm font-semibold text-gray-700">Overall Attendance</h3>
                        </div>
                        <div className="relative w-full">
                          <div className="w-full bg-gray-200 rounded-full h-1.5 relative">
                            <div
                              className="bg-sky-500 h-1.5 rounded-full"
                              style={{
                                width: `${Math.round(
                                  ((selectedTeacher.attendance || []).filter(a => a.status === 'present').length /
                                    Math.max((selectedTeacher.attendance || []).length, 1)
                                  ) * 100)}%`
                              }}
                            ></div>
                            {/* Percentage label at the end of the filler */}
                            <span
                              className="absolute top-2.5 text-xs font-medium text-sky-600"
                              style={{
                                left: `${Math.round(
                                  ((selectedTeacher.attendance || []).filter(a => a.status === 'present').length /
                                    Math.max((selectedTeacher.attendance || []).length, 1)
                                  ) * 100)}%`,
                                transform: 'translateX(-100%)'
                              }}
                            >
                              {Math.round(
                                ((selectedTeacher.attendance || []).filter(a => a.status === 'present').length /
                                  Math.max((selectedTeacher.attendance || []).length, 1)
                                ) * 100)}%
                            </span>
                          </div>
                          <div className="flex justify-between mt-1 text-xs text-gray-500">
                            <span>0%</span>
                            <span>100%</span>
                          </div>
                        </div>
                      </div>

                      {/* Date Filter */}
                      <div className="flex flex-col sm:flex-row items-end sm:items-center gap-3">
                        <div className="relative">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg className="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
                            </svg>
                          </div>
                          <input
                            type="date"
                            className="text-sm border border-gray-300 rounded-lg pl-9 pr-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            onChange={(e) => handleDateFilter(e.target.value)}
                            value={selectedDate || ''}
                          />
                        </div>
                        <button
                          onClick={() => handleDateFilter('')}
                          className="text-sm px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-center gap-1.5"
                        >
                          <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                          Reset Filter
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Attendance and Leave Tabs */}
                <div className="bg-white shadow-sm rounded-lg overflow-hidden">
                  <div className="border-b border-gray-200">
                    <nav className="flex -mb-px">
                      <button
                        onClick={() => setActiveTab('attendance')}
                        className={`py-3 px-4 text-sm font-medium ${activeTab === 'attendance' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
                      >
                        Attendance Records
                        <span className="ml-2 bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full text-xs">
                          {filteredData.attendance.length}
                        </span>
                      </button>
                      <button
                        onClick={() => setActiveTab('leaveRequests')}
                        className={`py-3 px-4 text-sm font-medium ${activeTab === 'leaveRequests' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
                      >
                        Leave Requests
                        <span className="ml-2 bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full text-xs">
                          {filteredData.leaveRequests.length}
                        </span>
                      </button>
                    </nav>
                  </div>

                  {/* Tab Content */}
                  <div className="p-6">
                    {activeTab === 'attendance' ? (
                      filteredData.attendance.length > 0 ? (
                        <div className="overflow-x-auto">
                          <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                              <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Day</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                              </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                              {filteredData.attendance.map((record) => (
                                <tr key={record._id} className="hover:bg-gray-50">
                                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    {formatDate(record.date)}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                    {getDayFromDate(record.date)}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-center">
                                    <StatusBadge status={record.status} />
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                    {record.checkIn} - {record.checkOut || '--'}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                          <p className="mt-2 text-sm text-gray-900">
                            {selectedDate
                              ? `No attendance records found for ${formatDate(selectedDate)}`
                              : 'No recent attendance records available'}
                          </p>
                        </div>
                      )
                    ) : (
                      filteredData.leaveRequests.length > 0 ? (
                        <div className="hide-scrollbar overflow-x-auto">
                          <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                              <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Day</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Reason</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                              </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                              {filteredData.leaveRequests.map((record) => (
                                <tr key={record._id} className="hover:bg-gray-50">
                                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    {formatDate(record.date)}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                    {getDayFromDate(record.date)}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-center">
                                    <TypeBadge type={record.type} />
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-center">
                                    <StatusBadge status={record.status} />
                                  </td>
                                  <td className="px-6 py-4 text-sm text-gray-500 text-center max-w-xs truncate">
                                    {record.reason}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <button
                                      onClick={() => {
                                        setSelectedLeave(record);
                                        setIsLeaveModalVisible(true);
                                      }}
                                      className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                    >
                                      View Details
                                    </button>
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                          </svg>
                          <p className="mt-2 text-sm text-gray-900">
                            {selectedDate
                              ? `No leave requests found for ${formatDate(selectedDate)}`
                              : 'No leave requests available'}
                          </p>
                        </div>
                      )
                    )}
                  </div>
                </div>
              </>
            ) : (
              <div className="bg-white shadow-sm rounded-lg p-12 text-center">
                <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                </svg>
                <h3 className="mt-2 text-sm font-medium text-gray-900">No teacher selected</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Select a teacher from the list to view attendance records
                </p>
              </div>
            )}
          </div>
        </div>
      </main>

      {/* Leave Request Modal */}
      {isLeaveModalVisible && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          <div className="absolute inset-0 bg-gray-500 bg-opacity-75" onClick={() => setIsLeaveModalVisible(false)}></div>
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full relative">
            <div className="p-6">
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="text-lg font-medium text-gray-900">Leave Request Details</h3>
                  <p className="text-sm text-gray-500 mt-1">
                    {selectedLeave?.date ? formatDate(selectedLeave.date) : 'No date specified'}
                  </p>
                </div>
                <button
                  onClick={() => setIsLeaveModalVisible(false)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>

              <div className="mt-6 space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Status</p>
                    <p className="mt-1 text-sm font-medium">
                      <StatusBadge status={selectedLeave?.status || 'pending'} />
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Type</p>
                    <p className="mt-1 text-sm font-medium">
                      {selectedLeave?.type ? <TypeBadge type={selectedLeave.type} /> : 'N/A'}
                    </p>
                  </div>
                </div>

                <div>
                  <p className="text-sm text-gray-500">Reason</p>
                  <p className="mt-1 text-sm text-gray-900">
                    {selectedLeave?.reason || 'No reason provided'}
                  </p>
                </div>

                {selectedLeave?.notes && (
                  <div>
                    <p className="text-sm text-gray-500">Notes</p>
                    <p className="mt-1 text-sm text-gray-900">
                      {selectedLeave.notes}
                    </p>
                  </div>
                )}
              </div>

              <div className="mt-6 flex justify-end space-x-3">
                <button
                  onClick={() => setIsLeaveModalVisible(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                >
                  Close
                </button>
                <button
                  className="px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-red-600 hover:bg-red-700"
                >
                  Reject
                </button>
                <button
                  className="px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-green-600 hover:bg-green-700"
                >
                  Approve
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Late Reason Modal */}
      {isReasonModalVisible && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          <div className="absolute inset-0 bg-gray-500 bg-opacity-75" onClick={() => setIsReasonModalVisible(false)}></div>
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full relative">
            <div className="p-6">
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="text-lg font-medium text-gray-900">Late Arrival Reason</h3>
                  <p className="text-sm text-gray-500 mt-1">Employee-submitted explanation</p>
                </div>
                <button
                  onClick={() => setIsReasonModalVisible(false)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>

              <div className="mt-6">
                <p className="text-sm text-gray-500 mb-2">Reason</p>
                <div className="p-4 bg-gray-50 rounded-md">
                  <p className="text-sm text-gray-900">
                    {selectedReason || 'No explanation was provided'}
                  </p>
                </div>
              </div>

              <div className="mt-6 flex justify-end">
                <button
                  onClick={() => setIsReasonModalVisible(false)}
                  className="px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-gray-800 hover:bg-gray-900"
                >
                  Acknowledge
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminTeacherAttendance_Page;
